import mysql.connector
#Category ID should be its own table for 3NF
#are SPs for datagrip?
def connect_to_database():
    try:
        conn = mysql.connector.connect(
            host='34.105.41.26',
            port='3306',
            user='root',
            password='P5(2Kn2vhNmprg-f',
            database='FSEEngStore' #This is the name of the DB you connecting to.
        )
        print(f'Connected to DB.')
        return conn

    except mysql.connector.Error as e:
        print(f'Error connecting to MySQL: {e}')
        return None

def queryCustomers(conn):
    try:
        cursor = conn.cursor()
        query = "SELECT * From Customers"
        cursor.execute(query)
        for row in cursor:
            print(row)
    except mysql.connector.Error as e:
        print(f'Error creating a record {e}')

def outOfStock(conn): #Menu 1
    try:
        cursor = conn.cursor()
        query = ("SELECT ProductID, ProductName From Products Where UnitsInStock = 0")
        cursor.execute(query)
        #add if none, there are none
        #extra: Maybe low quanitity.
        data = cursor.fetchall()
        if len(data) == 0:
            print("All products are in stock.")
        else:
            for row in data:
                print(f'PID: {row[0]} | Product: {row[1]}.')
    except mysql.connector.Error as e:
        print(f'Error creating a record {e}')

def orderCountByCustomer(conn):
    try:
        cursor = conn.cursor()
        query = ("SELECT C.CustomerID, COUNT(OrderID) FROM Customers C left outer join Orders O on O.CustomerID = C.CustomerID group by C.CustomerID")
        cursor.execute(query)
        data = cursor.fetchall()
        if len(data) == 0:
            print("You have no customers!")
        else:
            for row in data:
                print(f'Customer ID: {row[0]} | Number of Orders: {row[1]}')
    except mysql.connector.Error as e:
        print(f'Error creating a record {e}')

def maxItemPerOrder(conn):
    ## Change output here
    try:
        cursor = conn.cursor()
        query = ("SELECT OD.OrderID, P.ProductID, P.ProductName, P.UnitPrice FROM OrderDetails OD join Products P on OD.ProductID = P.ProductID WHERE (OD.OrderID, OD.UnitPrice) IN (SELECT OrderID, MAX(UnitPrice) FROM OrderDetails GROUP BY OrderID);")
        cursor.execute(query)
        data = cursor.fetchall()
        if len(data) == 0:
            print("You have no customers!")
        else:
            for orderID, prodID, prodName, price in data:
                print(f'Order {orderID}: Product ID {prodID} / {prodName} / ${price}')
    except mysql.connector.Error as e:
        print(f'Error creating a record {e}')


def main():
    print(
    """
    $$$$$$$$\  $$$$$$\  $$$$$$$$\ $$$$$$$$\ $$\   $$\  $$$$$$\   $$$$$$\ $$$$$$$$\  $$$$$$\  $$$$$$$\  $$$$$$$$\ 
    $$  _____|$$  __$$\ $$  _____|$$  _____|$$$\  $$ |$$  __$$\ $$  __$$\ \__$$  __|$$  __$$\ $$  __$$\ $$  _____|
    $$ |      $$ /  \__|$$ |      $$ |      $$$$\ $$ |$$ /  \__|$$ /  \__|  $$ |   $$ /  $$ |$$ |  $$ |$$ |      
    $$$$$\    \$$$$$$\  $$$$$\    $$$$$\    $$ $$\$$ |$$ |$$$$\ \$$$$$$\    $$ |   $$ |  $$ |$$$$$$$  |$$$$$\    
    $$  __|    \____$$\ $$  __|   $$  __|   $$ \$$$$ |$$ |\_$$ | \____$$\   $$ |   $$ |  $$ |$$  __$$< $$  __|   
    $$ |      $$\   $$ |$$ |      $$ |      $$ |\$$$ |$$ |  $$ |$$\   $$ |  $$ |   $$ |  $$ |$$ |  $$ |$$ |      
    $$ |      \$$$$$$  |$$$$$$$$\ $$$$$$$$\ $$ | \$$ |\$$$$$$  |\$$$$$$  |  $$ |    $$$$$$  |$$ |  $$ |$$$$$$$$\ 
    \__|       \______/ \________|\________|\__|  \__| \______/  \______/   \__|    \______/ \__|  \__|\________|                                                                                                
    Welcome to the FseEngStore!
    Please Selection an option below (1-5):
    1. List all products that are out of stock.
    2. Find the total number of orders placed by each customer.
    3. Display the details of the most expensive product ordered in each
       order.
    4. Retrieve a list of products that have never been ordered.
    5. Show the total revenue (price * quantity) generated by each
       supplier                                                                                                      
    """)
    selection = input("Please enter your selection:\n")

conn = connect_to_database()
maxItemPerOrder(conn)